#!/bin/bash

__Author="Jerren Saunders"
__Version=24.10.10
__ScriptName=$(basename "$0") # File name with extension
__AppDir=$(dirname "$0") # Path where script is stored
__AppName=${__ScriptName%.*} # File name without extension
__origArgs=$* # Capture all of the original arguments

function print_usage() {
    includeAppInfo=${1}
    cat <<EOT

This script will search the current directory tree for a file named '${MY_CUSTOM_FILE}', containing 
a key that matches the first argument.  If found, the value of that key will be used instead.
This can be used to allow local overriding of certain commands to point to a container
instead of the local installed command.

USAGE:
    ${__ScriptName} [-OPTIONS] [help | version | add | list [-l] | COMMAND [args...]]
        add <cmd> <value>    Adds the 'cmd' to the ${MY_CUSTOM_FILE} file in the current directory.
                             This command should be run in the workspace root directory.
                             The given command will be used whenever called from this level or a descendant.

        list [-l]           List the available command keys.
                            Includemy he the '-l' arg to list one key per line.  Default is column view.
        
        <COMMAND> [...args]  The command to run
        
        help        Show usage
        version     Show version number

    OPTIONS:
        -v      Verbose Level (Multiple may be given to increase the verbosity)
        -d      Dry Run.


EOT
    if [[ ${includeAppInfo} ]]; then 
        cat <<EOT
 By: ${__Author}
 Version: ${__Version}

EOT
    fi

    # Print options values if verbose mode
    log 1 "Parsed Options:"
    log 1 "  DryRun:  ${DRYRUN}"
    log 1 "  Verbose: ${VERBOSE}"
    log 1 "  File:    ${MY_CUSTOM_FILE}"
    log 1 ""

}

# Default Settings
VERBOSE=0
DRYRUN=false
MY_CUSTOM_FILE=.myCommand

while getopts 'dv' option; do
    # echo "Option: ${option}"
    case ${option} in 
        d ) DRYRUN=true ;;
        v ) VERBOSE=$((VERBOSE + 1)) ;;
        * ) # Do Nothing
    esac
done
shift $((OPTIND -1)) # Remaining args will be left

# Prints log message to the terminal
#  <int> lvl - Print Level: Only print this message if the VERSBOSE level is greater than or equal to this
#  <string> msg - Message to print
function log() {
    local lvl=$1
    local msg=$2

    if (( lvl <= VERBOSE )); then
        echo -e "$msg"
    fi
}

# Either runs the command or prints the command that would be executed if DRYRUN is 'true'
#  <cmd> cmd - Command to execute or print
function runCMD() {
    if [[ "${DRYRUN}" == "true" ]]; then 
        log 0 "CMD: $*"
    else 
        # Use printf to properly escape all arguments before passing them to eval
        eval "$*"
    fi
}


# # Function to read a value from an INI file under a specific section
# # Usage: read_ini <filename> <section> <key>
# read_ini() {
#     local filename=$1
#     local section=$2
#     local key=$3
#     local value=$(awk -F '=' -v section="[$section]" -v key="$key" '
#     $0 == section {in_section = 1; next}
#     in_section && $1 == key {print $2; exit}
#     /^\[.*\]$/ && in_section {in_section = 0}' "$filename")
#     echo $value
# }

# # Function to write a value to an INI file under a specific section
# # Usage: write_ini <filename> <section> <key> <value>
# write_ini() {
#     local filename=$1
#     local section=$2
#     local key=$3
#     local value=$4
#     local in_section=0
#     local found=0

#     awk -v sec="[$section]" -v key="$key" -v value="$value" '
#     BEGIN { FS=OFS="=" }
#     /^\[.*\]$/ { in_section=0 }
#     $0 == sec  { in_section=1; print; next }
#     in_section && $1 == key { $2=value; found=1 }
#     { print }
#     END {
#         if (!found && in_section) {
#             print key "=" value
#         }
#     }' "$filename" > tmpfile && mv tmpfile "$filename"
# }

# # Example usage:
# # read_ini "config.ini" "SectionName" "username"
# # write_ini "config.ini" "SectionName" "username" "newuser"



# Adds a new key-value pair to the ${MY_CUSTOM_FILE} file in the current directory
#  <string> key - The key to add
#  <string> value - The value to associate with the key
function add_key_value() {
    local key=$1
    local value="${*:2}"  # Capture all remaining arguments as the value
    local my_version_file=${MY_CUSTOM_FILE}

    # Check if the ${MY_CUSTOM_FILE} file exists, create it if not
    if [ ! -f "$my_version_file" ]; then
        log 1 "The ${MY_CUSTOM_FILE} file does not exist. Creating a new one."
        touch "$my_version_file"
    fi

    # Check if the key already exists in the file
    if grep -q "^$key=" "$my_version_file"; then
        log 1 "The key '$key' already exists. Updating the value."
        # Use sed to update the existing key's value
        sed -i "s|^$key=.*|$key=$value|" "$my_version_file"
    else
        log 1 "Adding new key '$key' with value '$value'."
        # Add the new key-value pair to the file
        echo "$key=$value" >> "$my_version_file"
    fi

    log 2 "Updated .myVersion content:"
    log 2 "$(cat $my_version_file)"
    log 2
}


# # Adds a new key-value pair to the ${MY_CUSTOM_FILE} file in the current directory
# #  <string> key - The key to add
# #  <string> value - The value to associate with the key
# function add_key_value_USING_INI() {
#     local key=$1
#     local value="${*:2}"  # Capture all remaining arguments as the value
#     local my_version_file=${MY_CUSTOM_FILE}

#     # Use write_ini to add or update the key-value pair under the 'commands' section
#     write_ini "$my_version_file" "commands" "$key" "$value"

#     log 2 "Updated ${MY_CUSTOM_FILE} content:"
#     log 2 "$(cat $my_version_file)"
#     log 2
# }

# Function to list all keys from the ${MY_CUSTOM_FILE} files in the current directory tree
# If the -l argument is given, output will not be piped to column.
function list_keys() {
    local my_version_file=${MY_CUSTOM_FILE}
    local dir
    dir=$(pwd)
    local -r indent="    "
    local use_column=true

    # Check for -l argument
    if [[ "$1" == "-l" ]]; then
        use_column=false
    fi

    # Check if the ${MY_CUSTOM_FILE} file exists in the current directory or up the tree
    while [ "$dir" != "/" ]; do
        if [ -f "$dir/${MY_CUSTOM_FILE}" ]; then
            log 0 "The following commands are available:"
            log 1 "  from '${dir}/${MY_CUSTOM_FILE}':"
            if [[ "$use_column" == true ]]; then
                grep '^[a-z][^=]*=' "$dir/${MY_CUSTOM_FILE}" | cut -d '=' -f1 | sort | sed "s/^/${indent}/" | column
            else
                grep '^[a-z][^=]*=' "$dir/${MY_CUSTOM_FILE}" | cut -d '=' -f1 | sort | sed "s/^/${indent}/"
            fi

            exit 0
        fi
        dir=$(dirname "$dir")
    done

    log 1 "No ${MY_CUSTOM_FILE} file was found in the current directory tree."
    return 1
}


function main() {
    # The command to search for
    cmd=$1

    # Check for command line args
    case "$1" in
        help)
            print_usage true
            exit 0
            ;;

        version)
            echo "${__Version}"
            exit 0
            ;;

        add)
            if [[ -z "$2" || -z "$3" ]]; then
                log 1 "Usage: ${__ScriptName} add <key> <value>"
                exit 1
            fi
            add_key_value "$2" "$3"
            exit 0
            ;;

        list)
            shift
            list_keys "$@"
            exit 0
            ;;

        *)
            if [[ "${DRYRUN}" == "true" ]]; then echo "---- THIS IS A DRYRUN! ----"; fi

            # Shift the arguments so that $@ does not include the first argument (the command)
            shift

            # Start in the current directory and move up the directory tree
            dir=$(pwd)
            while [ "$dir" != "/" ]; do
                # Check if the ${MY_CUSTOM_FILE} file exists in this directory
                if [ -f "$dir/${MY_CUSTOM_FILE}" ]; then
                    # Read the ${MY_CUSTOM_FILE} file and store the content
                    local -r my_version_content=$(<"$dir/${MY_CUSTOM_FILE}")

                    # Search for the key in the ${MY_CUSTOM_FILE} file
                    key_value=$(echo "$my_version_content" | grep "^$cmd=")
                    if [ -n "$key_value" ]; then
                        # Extract the command after the key
                        binary_cmd=$(echo "$key_value" | cut -d '=' -f2-)

                        # Replace any variables found in binary_cmd with their values
                        while [[ "$binary_cmd" =~ (\$\{([a-zA-Z_][^}]*)\}|\$([a-zA-Z_][a-zA-Z_0-9]*)) ]]; do
                            # var=${BASH_REMATCH[1]}
                            # Remove the leading $ from the variable name
                            # var_name=${var:1}

                            if [[ -n ${BASH_REMATCH[2]} ]]; then
                                # If the variable is surrounded by {}, it starts with [a-zA-Z_] and includes any character except for }
                                var_name=${BASH_REMATCH[2]}
                                var_with_possible_braces="\${${var_name}}"
                            else
                                # If the variable is not surrounded by {}, it follows the more restrictive pattern
                                var_name=${BASH_REMATCH[3]}
                                var_with_possible_braces="\$${var_name}"
                            fi
                            # Remove the leading $ and any surrounding {} from the variable name
                            # var_name=${var#$}
                            # var_name=${var_name%}}
                            # var_name=${var_name#\{}
                            # Get the value of the variable from my_version_content
                            var_value=$(echo "$my_version_content" | grep "^$var_name=" | cut -d '=' -f2-)
                            
                            # Substitute the variable in the binary_cmd
                            # binary_cmd=${binary_cmd//$var/$var_value}

                            # Substitute the variable in the binary_cmd
                            binary_cmd=${binary_cmd//$var_with_possible_braces/$var_value}
                        done

                        log 1 "The command key '${cmd}' was found in '${dir}/${MY_CUSTOM_FILE}'"
                        log 2 "  with a value of '${binary_cmd}'"
                        log 1 ""

                        # Run the extracted command with the additional arguments
                        local args
                        if [ $# -gt 0 ]; then
                            printf -v args '%q ' "$@"
                        fi
                        runCMD "$binary_cmd" "$args"
                        exit $?
                    fi
                fi
                # Move up to the parent directory
                dir=$(dirname "$dir")
            done

            # REVIEW: The following is new logic to use the r/w INI methods as suggested by OpenAI
            # # Start in the current directory and move up the directory tree
            # dir=$(pwd)
            # while [ "$dir" != "/" ]; do
            #     # Check if the ${MY_CUSTOM_FILE} file exists in this directory
            #     if [ -f "$dir/${MY_CUSTOM_FILE}" ]; then
            #         # Search for the command in the 'commands' section of the ${MY_CUSTOM_FILE} file
            #         binary_cmd=$(read_ini "$dir/${MY_CUSTOM_FILE}" "commands" "$cmd")
            #         if [ -n "$binary_cmd" ]; then
            #             # Replace any variables found in binary_cmd with their values from the 'vars' section
            #             while [[ "$binary_cmd" =~ (\$[a-zA-Z_][a-zA-Z_0-9]*) ]]; do
            #                 var=${BASH_REMATCH[1]}
            #                 # Remove the leading $ from the variable name
            #                 var_name=${var:1}
            #                 # Get the value of the variable from the 'vars' section
            #                 var_value=$(read_ini "$dir/${MY_CUSTOM_FILE}" "vars" "$var_name")
            #                 # Substitute the variable in the binary_cmd
            #                 binary_cmd=${binary_cmd//$var/$var_value}
            #             done
            # 
            #             # ... [rest of the binary_cmd execution]
            # 
            #             exit $?
            #         fi
            #     fi
            #     # Move up to the parent directory
            #     dir=$(dirname "$dir")
            # done
            # END REVIEW: OpenAI code block 

            # If the key was not found in any ${MY_CUSTOM_FILE} file, run the default command
            log 1 "No ${MY_CUSTOM_FILE} file was found in the current directory tree\n"
            runCMD "$cmd $*"
            ;;
    esac
}

# Call main function and pass all (remaining) CL args
main "$@"
exit 0



######################################
###  Change History
######################################
# shellcheck disable=SC2317  # Don't warn about unreachable commands in this function
/dev/null <<EOT
 - 24.10.10     Added support for surrounding variables with '{}'
 - 24.10.9.1616 Fix to preserve quotes around arguments when passing
 - 24.10.9      Added 'list' command
                # FIXME: Added dead code blocks to switch over to using INI file format with sections
 - 24.10.7.1312 Changed to using file ".myCommand" as default
 - 24.10.7.1216 Added ability to define variables within the .myVersion file that
                can be referenced and expanded in the key values
 - 24.10.7:     Initial Creation 
EOT